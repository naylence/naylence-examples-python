name: Test Examples

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-simple-examples:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        example:
        #   - echo_agent.py
        #   - function_as_agent.py
        #   - rpc_agent.py
        #   - agent_with_bg_task.py
        #   - a2a_agent.py
        #   - agent_ping_pong.py
          - hello.py
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction --no-root
    
    - name: Test simple example - ${{ matrix.example }}
      working-directory: examples/simple
      run: |
        poetry run python ${{ matrix.example }}

  test-docker-examples:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        example:
        #   # Delivery examples
        #   - examples/delivery/agent-crash-recovery
        #   - examples/delivery/retry-on-no-ack-received
        #   # Distributed examples (excluding LLM-based ones)
        #   - examples/distributed/biomes
        #   - examples/distributed/cancellable
        #   - examples/distributed/capability-routing
        #   - examples/distributed/hello
        #   - examples/distributed/hello-with-sentinel
        #   - examples/distributed/peers
        #   - examples/distributed/push-notifications
        #   - examples/distributed/rpc
        #   - examples/distributed/status-subscription
        #   # Monitoring examples
        #   - examples/monitoring/open-telemetry
        #   # Persistence examples
        #   - examples/persistence/agent-state
        #   - examples/persistence/storage-provider
          # Security examples
          - examples/security/advanced
        #   - examples/security/gated
        #   - examples/security/http-connector
        #   - examples/security/overlay
        #   - examples/security/stickiness
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction --no-root
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Fix directory permissions
      run: |
        # Ensure the examples directory and subdirectories are writable by all users (for Docker containers)
        sudo chown -R $USER:$USER /home/runner/work/
        find examples -type d -exec chmod 755 {} \;
        # Make config and security directories world-writable for Docker containers
        find examples -name "config" -type d -exec chmod 777 {} \; 2>/dev/null || true
        find examples -name ".secrets" -type d -exec chmod 777 {} \; 2>/dev/null || true
        # Pre-create .secrets directories with proper permissions
        find examples -name "security" -type d -exec mkdir -p {}/.secrets \; 2>/dev/null || true
        find examples -name "security" -type d -exec chmod 777 {}/.secrets \; 2>/dev/null || true
        # Pre-create certs directories for PKI generation
        find examples -name "config" -type d -exec mkdir -p {}/certs \; 2>/dev/null || true
        find examples -name "config" -type d -exec chmod 777 {}/certs \; 2>/dev/null || true
        find examples -name "config" -type d -exec mkdir -p {}/caddy/data \; 2>/dev/null || true
        find examples -name "config" -type d -exec chmod 777 {}/caddy \; 2>/dev/null || true
        find examples -name "config" -type d -exec chmod 777 {}/caddy/data \; 2>/dev/null || true
        # Make the entire examples directory tree writable for Docker bind mounts
        chmod -R a+w examples/ || true
    
    - name: Fix SSL certificate paths for containers
      run: |
        # Debug: Show what certificates are actually generated
        echo "=== Certificate directories after generation ==="
        find examples -name "certs" -type d -exec ls -la {} \; || true
        find examples -name "caddy" -type d -exec find {} -name "*.crt" -exec ls -la {} \; \; || true
        
        # Fix SSL_CERT_FILE paths in .env files to use PKI certificates instead of Caddy certificates
        # This is needed because containers mount PKI certs at /etc/fame/certs but not Caddy certs
        find examples -name "*.env.*" -type f -exec sed -i 's|SSL_CERT_FILE=/work/config/caddy/data/caddy/pki/authorities/local/root.crt|SSL_CERT_FILE=/etc/fame/certs/root-ca.crt|g' {} \; 2>/dev/null || true
    
    - name: Test docker example - ${{ matrix.example }}
      working-directory: ${{ matrix.example }}
      run: |
        echo "Testing example: ${{ matrix.example }}"
        # Set up environment to use poetry's virtual environment
        export PATH="$(cd ../.. && poetry env info --path)/bin:$PATH"
        
        # Run with verbose output and capture logs on failure
        set -e
        echo "Starting containers..."
        if ! make; then
          echo "❌ Container startup failed. Showing logs:"
          docker compose logs --tail=100 || true
          echo "=== Container states ==="
          docker compose ps -a || true
          echo "=== Available certificate files ==="
          docker compose exec -T sentinel-internal ls -la /etc/fame/certs/ || true
          docker compose exec -T sentinel-internal cat /etc/fame/certs/root-ca.crt || echo "No root-ca.crt found"
          exit 1
        fi
        
        echo "Waiting for services to be ready..."
        sleep 15
        
        echo "Checking container status..."
        docker compose ps
        
        echo "Running client..."
        if ! make run; then
          echo "❌ Client run failed. Showing logs:"
          docker compose logs --tail=50 || true
          make clean || true
          exit 1
        fi
        
        echo "Cleaning up..."
        make clean
      timeout-minutes: 10